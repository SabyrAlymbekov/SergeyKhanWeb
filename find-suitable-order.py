#!/usr/bin/env python3

import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://127.0.0.1:8000"
MASTER_EMAIL = "test_master@completion.com"
MASTER_PASSWORD = "test123"
MASTER_ID = 13

def login_master():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    login_data = {
        "email": MASTER_EMAIL,
        "password": MASTER_PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/login/", json=login_data)
    if response.status_code == 200:
        token = response.json().get("token")
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–∞")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞: {response.status_code}")
        print(response.text)
        return None

def find_suitable_order(token):
    """–ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    headers = {"Authorization": f"Token {token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    response = requests.get(f"{BASE_URL}/api/orders/all/", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
        return None
    
    orders = response.json()
    suitable_orders = []
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã:")
    for order in orders:
        order_id = order.get('id')
        status = order.get('status')
        assigned_master = order.get('assigned_master')
        has_completion = 'completion' in order and order['completion']
        
        print(f"   ID: {order_id}, –°—Ç–∞—Ç—É—Å: {status}, –ú–∞—Å—Ç–µ—Ä: {assigned_master}, –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {has_completion}")
        
        # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—É –∏ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (status in ['–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–Ω–∞–∑–Ω–∞—á–µ–Ω'] and 
            assigned_master == MASTER_ID and 
            not has_completion):
            suitable_orders.append(order)
    
    if suitable_orders:
        best_order = suitable_orders[0]
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑: ID={best_order['id']}, —Å—Ç–∞—Ç—É—Å={best_order['status']}")
        return best_order['id']
    else:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
        return None

def assign_order_to_master(token, order_id):
    """–ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—É –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å"""
    headers = {"Authorization": f"Token {token}"}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
    update_data = {
        "assigned_master": MASTER_ID,
        "status": "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    }
    
    response = requests.patch(f"{BASE_URL}/api/orders/{order_id}/update/", 
                            headers=headers, json=update_data)
    
    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}:")
    print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    
    return response.status_code == 200

if __name__ == "__main__":
    print("üéØ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞
    token = login_master()
    if not token:
        exit(1)
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑
    order_id = find_suitable_order(token)
    
    if not order_id:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—É...")
        
        # –ë–µ—Ä–µ–º –ª—é–±–æ–π –∑–∞–∫–∞–∑ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        response = requests.get(f"{BASE_URL}/api/orders/all/", 
                              headers={"Authorization": f"Token {token}"})
        
        if response.status_code == 200:
            orders = response.json()
            for order in orders:
                if not ('completion' in order and order['completion']):
                    test_order_id = order['id']
                    print(f"–ü—Ä–æ–±—É–µ–º –∑–∞–∫–∞–∑ {test_order_id}")
                    if assign_order_to_master(token, test_order_id):
                        order_id = test_order_id
                        break
    
    if order_id:
        print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ORDER_ID = {order_id} –≤ test-completion-debug.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
