#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–º –º–∞—Å—Ç–µ—Ä–∞–º.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∂–∏–≤–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000.
"""

import requests
import json
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
BASE_URL = "http://localhost:8000"
API_HEADERS = {"Content-Type": "application/json"}

def test_live_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∂–∏–≤–æ–π API"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–≤–æ–≥–æ API –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/admin/", timeout=5)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    try:
        response = requests.get(f"{BASE_URL}/api/orders/all/", headers=API_HEADERS, timeout=5)
        if response.status_code == 200:
            orders = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤: {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_order = None
            for order in orders:
                if order.get('status') == '–≤ —Ä–∞–±–æ—Ç–µ' and order.get('assigned_master'):
                    test_order = order
                    break
            
            if test_order:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ID {test_order['id']}")
                return test_transfer_functionality(test_order['id'])
            else:
                print("‚ö†Ô∏è  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return test_create_and_transfer()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    
    return False

def test_create_and_transfer():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É"""
    print("\nüõ†Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    order_data = {
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏",
        "estimated_cost": "100.00",
        "final_cost": "150.00",
        "expenses": "50.00",
        "status": "–Ω–æ–≤—ã–π"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/orders/create/",
            headers=API_HEADERS,
            data=json.dumps(order_data),
            timeout=5
        )
        
        if response.status_code in [200, 201]:
            order = response.json()
            order_id = order.get('id') or order.get('order_id')
            print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order_id}")
            return test_transfer_functionality(order_id)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    return False

def test_transfer_functionality(order_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"""
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∑–∞–∫–∞–∑–∞ ID {order_id}...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    transfer_data = {
        "warranty_master_id": 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å ID 1
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/orders/{order_id}/transfer/",
            headers=API_HEADERS,
            data=json.dumps(transfer_data),
            timeout=5
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω–µ–Ω: {result.get('fine_applied', 'N/A')}")
            print(f"   –ë—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä: {result.get('had_assigned_master', 'N/A')}")
            print(f"   –ü–µ—Ä–µ–¥–∞–ª: {result.get('transferred_by', 'N/A')} ({result.get('transferred_by_role', 'N/A')})")
            return True
        elif response.status_code == 401:
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –∂–∏–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∂–∏–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        elif response.status_code == 403:
            result = response.json()
            print("‚ö†Ô∏è  –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤):")
            print(f"   –û—à–∏–±–∫–∞: {result.get('error', 'N/A')}")
            return True  # –≠—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        elif response.status_code == 404:
            print("‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏: {e}")
    
    return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    endpoints = [
        "/api/orders/all/",
        "/orders/create/",
        "/api/user/",
        "/users/masters/",
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=3)
            if response.status_code in [200, 401, 403]:  # –≠—Ç–∏ —Å—Ç–∞—Ç—É—Å—ã –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                print(f"‚úÖ {endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            else:
                print(f"‚ö†Ô∏è  {endpoint} - —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint} - –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ñ–ò–í–û–ì–û API –°–ï–†–í–ï–†–ê")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    test_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    success = test_live_api()
    
    print("\n" + "=" * 80)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        print("‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
        print("   –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
    print("=" * 80)
