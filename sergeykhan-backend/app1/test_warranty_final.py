#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–º –º–∞—Å—Ç–µ—Ä–∞–º.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
1. –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º (—à—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)
2. –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (—à—Ç—Ä–∞—Ñ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)  
3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import os
import sys
import django
import json
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from api1.models import Order, Balance, BalanceLog, TransactionLog, OrderLog, CustomUser
from rest_framework.authtoken.models import Token

User = get_user_model()

class FinalWarrantyTransferTest(TestCase):
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.super_admin = self._create_user("super_admin@test.com", 'super-admin', is_staff=True, is_superuser=True)
        self.admin = self._create_user("admin@test.com", 'admin')
        self.curator = self._create_user("curator@test.com", 'curator')
        self.master = self._create_user("master@test.com", 'master')
        self.warranty_master = self._create_user("warranty@test.com", 'warrant-master')
        self.regular_master = self._create_user("regular@test.com", 'master')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –º–∞—Å—Ç–µ—Ä–∞
        self.master_balance, _ = Balance.objects.get_or_create(
            user=self.master, 
            defaults={'amount': Decimal('500.00')}
        )
        
    def _create_user(self, email, role, is_staff=False, is_superuser=False):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        user = CustomUser.objects.create(
            email=email,
            role=role,
            is_staff=is_staff,
            is_superuser=is_superuser
        )
        user.set_password("password123")
        user.save()
        return user
    
    def _get_token(self, user):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token, _ = Token.objects.get_or_create(user=user)
        return token.key
    
    def _transfer_order(self, user, order_id, warranty_master_id):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∑–∞–∫–∞–∑–∞"""
        client = Client()
        token = self._get_token(user)
        
        return client.post(
            f'/orders/{order_id}/transfer/',
            data=json.dumps({'warranty_master_id': warranty_master_id}),
            content_type='application/json',
            HTTP_AUTHORIZATION=f'Token {token}'
        )
    
    def test_scenario_1_assigned_master_transfer_with_fine(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º (—à—Ç—Ä–∞—Ñ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è)"""
        print("\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–µ–¥–∞—á–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º
        order = Order.objects.create(
            description="–ó–∞–∫–∞–∑ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º",
            status="–≤ —Ä–∞–±–æ—Ç–µ",
            assigned_master=self.master,
            estimated_cost=Decimal('100.00'),
            final_cost=Decimal('200.00'),
            expenses=Decimal('75.00')
        )
        
        initial_balance = self.master_balance.amount
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–∞—Å—Ç–µ—Ä–∞: {initial_balance}")
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞
        response = self._transfer_order(self.master, order.id, self.warranty_master.id)
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        self.assertEqual(response.status_code, 200)
        
        response_data = response.json()
        print(f"–®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω—ë–Ω: {response_data['fine_applied']}")
        print(f"–ë—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä: {response_data['had_assigned_master']}")
        print(f"–ü–µ—Ä–µ–¥–∞–ª: {response_data['transferred_by']} ({response_data['transferred_by_role']})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        self.assertEqual(response_data['fine_applied'], 50.0)  # –®—Ç—Ä–∞—Ñ = expenses (50% –æ—Ç profit: 200-150=50)
        self.assertTrue(response_data['had_assigned_master'])
        self.assertEqual(response_data['transferred_by_role'], 'master')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order.refresh_from_db()
        self.assertEqual(order.status, '–ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é')
        self.assertEqual(order.transferred_to, self.warranty_master)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
        self.master_balance.refresh_from_db()
        expected_balance = initial_balance - Decimal('50.00')
        self.assertEqual(self.master_balance.amount, expected_balance)
        print(f"–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–∞—Å—Ç–µ—Ä–∞: {self.master_balance.amount}")
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
    
    def test_scenario_2_no_assigned_master_no_fine(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (—à—Ç—Ä–∞—Ñ –ù–ï –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è)"""
        print("\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        order = Order.objects.create(
            description="–ó–∞–∫–∞–∑ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞", 
            status="–Ω–æ–≤—ã–π",
            estimated_cost=Decimal('100.00'),
            final_cost=Decimal('200.00'),
            expenses=Decimal('75.00')
        )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        response = self._transfer_order(self.super_admin, order.id, self.warranty_master.id)
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        self.assertEqual(response.status_code, 200)
        
        response_data = response.json()
        print(f"–®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω—ë–Ω: {response_data['fine_applied']}")
        print(f"–ë—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä: {response_data['had_assigned_master']}")
        print(f"–ü–µ—Ä–µ–¥–∞–ª: {response_data['transferred_by']} ({response_data['transferred_by_role']})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        self.assertEqual(response_data['fine_applied'], 0.0)  # –ù–∏–∫–æ–≥–æ —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        self.assertFalse(response_data['had_assigned_master'])
        self.assertEqual(response_data['transferred_by_role'], 'super-admin')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order.refresh_from_db()
        self.assertEqual(order.status, '–ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é')
        self.assertEqual(order.transferred_to, self.warranty_master)
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
    
    def test_scenario_3_admin_roles_permissions(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        print("\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π")
        
        order = Order.objects.create(
            description="–ó–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
            status="–≤ —Ä–∞–±–æ—Ç–µ",
            assigned_master=self.master,
            estimated_cost=Decimal('100.00'),
            final_cost=Decimal('150.00'),
            expenses=Decimal('50.00')
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        test_users = [
            (self.super_admin, 'super-admin'),
            (self.admin, 'admin'), 
            (self.curator, 'curator')
        ]
        
        for user, role_name in test_users:
            print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–æ–ª–∏: {role_name}")
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            test_order = Order.objects.create(
                description=f"–ó–∞–∫–∞–∑ –¥–ª—è {role_name}",
                status="–≤ —Ä–∞–±–æ—Ç–µ",
                assigned_master=self.master,
                estimated_cost=Decimal('100.00'),
                final_cost=Decimal('150.00'),
                expenses=Decimal('50.00')
            )
            
            response = self._transfer_order(user, test_order.id, self.warranty_master.id)
            
            print(f"  –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            self.assertEqual(response.status_code, 200, f"–†–æ–ª—å {role_name} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø")
            
            response_data = response.json()
            self.assertEqual(response_data['transferred_by_role'], role_name)
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 3 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
    
    def test_scenario_4_unauthorized_access_denied(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        print("\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        order = Order.objects.create(
            description="–ó–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞",
            status="–≤ —Ä–∞–±–æ—Ç–µ", 
            assigned_master=self.master,
            estimated_cost=Decimal('100.00'),
            final_cost=Decimal('150.00'),
            expenses=Decimal('50.00')
        )
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ã—á–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –Ω–∞ –∑–∞–∫–∞–∑)
        response = self._transfer_order(self.regular_master, order.id, self.warranty_master.id)
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
        
        self.assertEqual(response.status_code, 403, "–û–±—ã—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø")
        
        response_data = response.json()
        self.assertIn('error', response_data)
        self.assertEqual(response_data['user_role'], 'master')
        self.assertFalse(response_data['is_assigned_master'])
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 4 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
    
    def test_scenario_5_logging_verification(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        order = Order.objects.create(
            description="–ó–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            status="–≤ —Ä–∞–±–æ—Ç–µ",
            assigned_master=self.master,
            estimated_cost=Decimal('100.00'),
            final_cost=Decimal('150.00'),
            expenses=Decimal('50.00')
        )
        
        # –°—á–∏—Ç–∞–µ–º –ª–æ–≥–∏ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        initial_order_logs = OrderLog.objects.filter(order=order).count()
        initial_balance_logs = BalanceLog.objects.filter(user=self.master).count()
        
        print(f"–õ–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {initial_order_logs}")
        print(f"–õ–æ–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∞ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {initial_balance_logs}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É
        response = self._transfer_order(self.master, order.id, self.warranty_master.id)
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        final_order_logs = OrderLog.objects.filter(order=order).count()
        final_balance_logs = BalanceLog.objects.filter(user=self.master).count()
        
        print(f"–õ–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {final_order_logs}")
        print(f"–õ–æ–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {final_balance_logs}")
        
        # –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ –ª–æ–≥–∏
        self.assertGreater(final_order_logs, initial_order_logs, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –ª–æ–≥ –∑–∞–∫–∞–∑–∞")
        self.assertGreater(final_balance_logs, initial_balance_logs, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –ª–æ–≥ –±–∞–ª–∞–Ω—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤
        order_log = OrderLog.objects.filter(order=order).last()
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        self.assertTrue(
            'transferred' in order_log.action.lower() or '–ø–µ—Ä–µ–¥–∞–Ω' in order_log.action.lower(),
            f"–õ–æ–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞—á–µ, –ø–æ–ª—É—á–µ–Ω: {order_log.action}"
        )
        
        balance_log = BalanceLog.objects.filter(user=self.master).last()
        self.assertEqual(balance_log.action, 'fine_transfer')
        self.assertEqual(balance_log.amount, Decimal('-50.00'))  # —à—Ç—Ä–∞—Ñ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
        
        print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 5 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")

def print_final_report():
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*80)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*80)
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
    print("   1. –ü–µ—Ä–µ–¥–∞—á–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º (—à—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)")
    print("   2. –ü–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (—à—Ç—Ä–∞—Ñ –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)")
    print("   3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π")
    print("   4. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    print("   5. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("\nüéØ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–º –º–∞—Å—Ç–µ—Ä–∞–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print("   –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    print("="*80)
