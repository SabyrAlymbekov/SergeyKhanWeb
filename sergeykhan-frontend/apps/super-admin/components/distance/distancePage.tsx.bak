"use client"

import React, { useState, useEffect } from "react";
import { Button } from "@workspace/ui/components/button";
import { Input       const response = await fetch('/api/remote-work/auto-update-all', {
        method: 'POST',
        headers: {
          'Authorization': `Token ${token}`,
          'Content-Type': 'application/json',
        },
      });"@workspace/ui/components/input";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@workspace/ui/components/table";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@workspace/ui/components/card";
import { Badge } from "@workspace/ui/components/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@workspace/ui/components/tabs";
import { toast } from "sonner";

interface Master {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
  current_dist_level: number;
  eligible_dist_level: number;
  avg_order_value: number;
  daily_order_value: number;
  ten_days_value: number;
}

const DistancePage = () => {
  // Состояния для обычной дистанционки:
  const [averageCheckThreshold, setAverageCheckThreshold] = useState(65000);
  const [visiblePeriodStandard, setVisiblePeriodStandard] = useState(4); // часы

  // Состояния для суточной дистанционки:
  const [dailyOrderSumThreshold, setDailyOrderSumThreshold] = useState(350000);
  const [netTurnoverThreshold, setNetTurnoverThreshold] = useState(1500000);
  const [visiblePeriodDaily, setVisiblePeriodDaily] = useState(24); // часы

  // Состояние для списка мастеров
  const [masters, setMasters] = useState<Master[]>([]);
  const [loading, setLoading] = useState(false);
  const [autoUpdateLoading, setAutoUpdateLoading] = useState(false);

  // Загрузка списка мастеров при монтировании компонента
  useEffect(() => {
    fetchMasters();
  }, []);

  // Функция для получения токена из localStorage
  const getAuthToken = () => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('token');
    }
    return null;
  };

  // Функция для загрузки списка мастеров
  const fetchMasters = async () => {
    setLoading(true);
    try {
      const token = getAuthToken();
      if (!token) {
        throw new Error('Отсутствует токен авторизации');
      }

      const response = await fetch('/api/remote-work/all-masters', {
        headers: {
          'Authorization': `Token ${token}`,
          'Content-Type': 'application/json',
        }
      });
      if (!response.ok) {
        throw new Error('Ошибка при загрузке списка мастеров');
      }
      const data = await response.json();
      setMasters(data.masters || []);
    } catch (error) {
      console.error('Ошибка при загрузке списка мастеров:', error);
      toast.error('Не удалось загрузить список мастеров');
    } finally {
      setLoading(false);
    }
  };

  // Функция для обновления статуса дистанционки мастера
  const updateMasterDistLevel = async (masterId: number, distLevel: number) => {
    try {
      const token = getAuthToken();
      if (!token) {
        throw new Error('Отсутствует токен авторизации');
      }

      const response = await fetch(`/api/remote-work/update/${masterId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Token ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ dist_level: distLevel }),
      });

      if (!response.ok) {
        throw new Error('Ошибка при обновлении статуса дистанционки');
      }

      const data = await response.json();
      toast.success(`Статус дистанционки изменен для ${data.name}`);

      // Обновляем список мастеров
      setMasters(masters.map(master => 
        master.id === masterId 
          ? { ...master, current_dist_level: distLevel } 
          : master
      ));
    } catch (error) {
      console.error('Ошибка при обновлении статуса дистанционки:', error);
      toast.error('Не удалось обновить статус дистанционки');
    }
  };

  // Функция для автоматического обновления статусов всех мастеров
  const autoUpdateAllMasters = async () => {
    setAutoUpdateLoading(true);
    try {
      const token = getAuthToken();
      if (!token) {
        throw new Error('Отсутствует токен авторизации');
      }

      const response = await fetch('/api/remote-work/auto-update-all', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error('Ошибка при автоматическом обновлении статусов');
      }

      const data = await response.json();
      toast.success(`Обновлено ${data.updated_masters.length} мастеров`);
      
      // Обновляем список мастеров
      await fetchMasters();
    } catch (error) {
      console.error('Ошибка при автоматическом обновлении статусов:', error);
      toast.error('Не удалось выполнить автоматическое обновление');
    } finally {
      setAutoUpdateLoading(false);
    }
  };

  const handleSaveSettings = () => {
    // Здесь можно добавить логику сохранения настроек через API
    console.log("Новые настройки дистанционки:", {
      averageCheckThreshold,
      visiblePeriodStandard,
      dailyOrderSumThreshold,
      netTurnoverThreshold,
      visiblePeriodDaily,
    });
    toast.success('Настройки сохранены');
  };

  // Функция для получения текстового описания уровня дистанционки
  const getDistLevelText = (level: number) => {
    switch(level) {
      case 0: return 'Нет доступа';
      case 1: return 'Доступ на 4 часа';
      case 2: return 'Доступ на 24 часа';
      default: return 'Неизвестно';
    }
  };

  // Функция для получения цвета бейджа в зависимости от уровня дистанционки
  const getDistLevelBadgeVariant = (level: number): "default" | "destructive" | "outline" | "secondary" => {
    switch(level) {
      case 0: return 'destructive';
      case 1: return 'secondary';
      case 2: return 'default';
      default: return 'outline';
    }
  };

  return (
    <div className="md:max-w-6xl md:mx-auto md:p-6">
      <h1 className="text-2xl font-bold mb-6 text-center">
        Управление дистанционкой
      </h1>

      <Tabs defaultValue="masters" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="masters">Мастера</TabsTrigger>
          <TabsTrigger value="settings">Настройки</TabsTrigger>
        </TabsList>

        <TabsContent value="masters">
          <Card>
            <CardHeader>
              <CardTitle>Мастера и их доступ к дистанционной работе</CardTitle>
              <CardDescription>
                Здесь вы можете просмотреть и изменить уровень доступа мастеров к дистанционной работе.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <Button 
                  onClick={autoUpdateAllMasters} 
                  disabled={autoUpdateLoading}
                  className="w-full sm:w-auto"
                >
                  {autoUpdateLoading ? 'Обновление...' : 'Автоматически обновить всех мастеров'}
                </Button>
              </div>

              {loading ? (
                <div className="text-center py-8">Загрузка списка мастеров...</div>
              ) : (
                <div className="rounded-md border">
                  <Table>
                    <TableCaption>Список мастеров и их статусы дистанционки</TableCaption>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Мастер</TableHead>
                        <TableHead>Текущий статус</TableHead>
                        <TableHead>Рекомендуемый статус</TableHead>
                        <TableHead>Средний чек</TableHead>
                        <TableHead>Сумма за день</TableHead>
                        <TableHead>Сумма за 10 дней</TableHead>
                        <TableHead>Действия</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {masters.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={7} className="text-center">Нет доступных мастеров</TableCell>
                        </TableRow>
                      ) : (
                        masters.map((master) => (
                          <TableRow key={master.id}>
                            <TableCell>
                              <div className="font-medium">{master.first_name} {master.last_name}</div>
                              <div className="text-sm text-muted-foreground">{master.email}</div>
                            </TableCell>
                            <TableCell>
                              <Badge variant={getDistLevelBadgeVariant(master.current_dist_level)}>
                                {getDistLevelText(master.current_dist_level)}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant={getDistLevelBadgeVariant(master.eligible_dist_level)}>
                                {getDistLevelText(master.eligible_dist_level)}
                              </Badge>
                            </TableCell>
                            <TableCell>{master.avg_order_value.toLocaleString()}₸</TableCell>
                            <TableCell>{master.daily_order_value.toLocaleString()}₸</TableCell>
                            <TableCell>{master.ten_days_value.toLocaleString()}₸</TableCell>
                            <TableCell>
                              <div className="flex gap-2">
                                <Button
                                  onClick={() => updateMasterDistLevel(master.id, 0)}
                                  variant="outline"
                                  className={master.current_dist_level === 0 ? 'bg-gray-100' : ''}
                                >
                                  0
                                </Button>
                                <Button
                                  onClick={() => updateMasterDistLevel(master.id, 1)}
                                  variant="outline"
                                  className={master.current_dist_level === 1 ? 'bg-gray-100' : ''}
                                >
                                  1
                                </Button>
                                <Button
                                  onClick={() => updateMasterDistLevel(master.id, 2)}
                                  variant="outline"
                                  className={master.current_dist_level === 2 ? 'bg-gray-100' : ''}
                                >
                                  2
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings">
          <Card>
            <CardHeader>
              <CardTitle>Настройки дистанционки</CardTitle>
              <CardDescription>
                Настройте параметры доступа к дистанционной работе для мастеров.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {/* Обычная дистанционка */}
              <div className="mb-8 border p-4 rounded">
                <h2 className="text-xl font-semibold mb-2">Обычная дистанционка (Уровень 1)</h2>
                <p className="mb-4 text-gray-600">
                  Если средний чек за последние 10 заказов ≥ {averageCheckThreshold}₸, мастер видит заказы на {visiblePeriodStandard} часов вперед.
                </p>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Средний чек (₸)
                    </label>
                    <Input
                      type="number"
                      value={averageCheckThreshold}
                      onChange={(e) => setAverageCheckThreshold(Number(e.target.value))}
                      className="mt-1 block w-full"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Заказы видны (часов)
                    </label>
                    <Input
                      type="number"
                      value={visiblePeriodStandard}
                      onChange={(e) => setVisiblePeriodStandard(Number(e.target.value))}
                      className="mt-1 block w-full"
                    />
                  </div>
                </div>
              </div>

              {/* Суточная дистанционка */}
              <div className="mb-8 border p-4 rounded">
                <h2 className="text-xl font-semibold mb-2">Суточная дистанционка (Уровень 2)</h2>
                <p className="mb-4 text-gray-600">
                  Для суточной дистанционки требуется, чтобы сумма заказов за сутки была ≥ {dailyOrderSumThreshold}₸ или чистый вал за 10 дней ≥ {netTurnoverThreshold}₸. В таком случае заказы видны на {visiblePeriodDaily} часов вперед.
                </p>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Сумма заказов в сутки (₸)
                    </label>
                    <Input
                      type="number"
                      value={dailyOrderSumThreshold}
                      onChange={(e) => setDailyOrderSumThreshold(Number(e.target.value))}
                      className="mt-1 block w-full"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Чистый вал за 10 дней (₸)
                    </label>
                    <Input
                      type="number"
                      value={netTurnoverThreshold}
                      onChange={(e) => setNetTurnoverThreshold(Number(e.target.value))}
                      className="mt-1 block w-full"
                    />
                  </div>
                  <div className="sm:col-span-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Заказы видны (часов)
                    </label>
                    <Input
                      type="number"
                      value={visiblePeriodDaily}
                      onChange={(e) => setVisiblePeriodDaily(Number(e.target.value))}
                      className="mt-1 block w-full"
                    />
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveSettings}>Сохранить изменения</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default DistancePage;
