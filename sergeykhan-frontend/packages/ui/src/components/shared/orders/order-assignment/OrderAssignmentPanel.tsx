'use client';

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@workspace/ui/components/ui";
import { Button } from "@workspace/ui/components/ui";
import { Badge } from "@workspace/ui/components/ui";
import { Input } from "@workspace/ui/components/ui";
import { Card, CardContent, CardHeader, CardTitle } from "@workspace/ui/components/ui";
import { Separator } from "@workspace/ui/components/ui";
import { Clock, User, Calendar, AlertCircle, CheckCircle, Search, RefreshCw } from 'lucide-react';
import { toast } from 'sonner';

interface MasterAvailability {
  id: number;
  date: string;
  start_time: string;
  end_time: string;
}

interface MasterWorkloadData {
  master_id: number;
  master_email: string;
  availability_slots: MasterAvailability[];
  orders_count_by_date: Record<string, number>;
  next_available_slot: {
    date: string;
    start_time: string;
    end_time: string;
    orders_on_date: number;
  } | null;
  total_orders_today: number;
}

interface Master {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  full_name?: string;
  phone?: string;
}

interface OrderAssignmentPanelProps {
  isOpen: boolean;
  onClose: () => void;
  onAssign: (masterId: number, slotData?: { scheduled_date: string; scheduled_time: string }) => void;
  orderId?: number;
  orderDate?: string;
  orderTime?: string;
  loading?: boolean;
}

const OrderAssignmentPanel: React.FC<OrderAssignmentPanelProps> = ({
  isOpen,
  onClose,
  onAssign,
  orderId,
  orderDate,
  orderTime,
  loading = false
}) => {
  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Ä–µ–Ω–¥–µ—Ä–∞
  console.log('üé® OrderAssignmentPanel —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è:', { 
    isOpen, 
    orderId, 
    orderDate, 
    orderTime, 
    loading 
  });

  const [masters, setMasters] = useState<Master[]>([]);
  const [mastersWorkload, setMastersWorkload] = useState<Record<number, MasterWorkloadData>>({});
  const [selectedMasterId, setSelectedMasterId] = useState<number | null>(null);
  const [selectedSlot, setSelectedSlot] = useState<MasterAvailability | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch masters and their workload data
  const fetchMastersData = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
      }

      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤...');
      console.log('üìç API URL:', baseUrl);
      console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token ? '–î–∞' : '–ù–µ—Ç');

      // Fetch masters list
      const mastersResponse = await fetch(`${baseUrl}/users/masters/`, {
        headers: { 
          Authorization: `Token ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:', mastersResponse.status);
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(mastersResponse.headers.entries()));
      
      if (!mastersResponse.ok) {
        const errorText = await mastersResponse.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', errorText);
        
        if (mastersResponse.status === 401) {
          throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞.');
        } else if (mastersResponse.status === 403) {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.');
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${mastersResponse.status} - ${errorText}`);
        }
      }
      
      const mastersData = await mastersResponse.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', mastersData);
      console.log('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤:', mastersData?.length || 0);
      
      if (!mastersData || !Array.isArray(mastersData) || mastersData.length === 0) {
        throw new Error('–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤.');
      }
      
      setMasters(mastersData);
      console.log('üíæ –ú–∞—Å—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', mastersData.length);

      // Fetch workload data for each master
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Ç–µ—Ä–æ–≤...');
      const workloadPromises = mastersData.map(async (master: Master) => {
        try {
          console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${master.id} (${master.email})`);
          const workloadResponse = await fetch(
            `${baseUrl}/api/masters/${master.id}/workload/`,
            { 
              headers: { 
                Authorization: `Token ${token}`,
                'Content-Type': 'application/json'
              } 
            }
          );
          
          if (workloadResponse.ok) {
            const workloadData = await workloadResponse.json();
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${master.id}:`, workloadData);
            console.log(`üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ ${master.id}:`, workloadData.availability_slots);
            return { masterId: master.id, workloadData };
          } else {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${master.id}:`, workloadResponse.status);
            return { masterId: master.id, workloadData: null };
          }
        } catch (err) {
          console.warn(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${master.id}:`, err);
          return { masterId: master.id, workloadData: null };
        }
      });

      const workloadResults = await Promise.all(workloadPromises);
      const workloadMap: Record<number, MasterWorkloadData> = {};
      
      workloadResults.forEach(({ masterId, workloadData }) => {
        if (workloadData) {
          workloadMap[masterId] = workloadData;
        }
      });

      setMastersWorkload(workloadMap);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', Object.keys(workloadMap).length, '–∏–∑', mastersData.length);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
      if (mastersData.length > 0) {
        toast.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mastersData.length} –º–∞—Å—Ç–µ—Ä–æ–≤`);
      }
    } catch (err: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:', err);
      setError(err.message);
      toast.error(`–û—à–∏–±–∫–∞: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (isOpen) {
      console.log('üöÄ OrderAssignmentPanel –æ—Ç–∫—Ä—ã—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤...');
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { orderId, orderDate, orderTime });
      fetchMastersData();
    } else {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      setSelectedMasterId(null);
      setSelectedSlot(null);
      setSearchTerm('');
      setError(null);
    }
  }, [isOpen]);

  // Filter masters based on search term
  const filteredMasters = masters.filter(master => {
    try {
      const firstName = master?.first_name || '';
      const lastName = master?.last_name || '';
      const email = master?.email || '';
      const searchTermLower = (searchTerm || '').toLowerCase();
      
      return firstName.toLowerCase().includes(searchTermLower) ||
             lastName.toLowerCase().includes(searchTermLower) ||
             email.toLowerCase().includes(searchTermLower);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error, 'Master:', master);
      return false;
    }
  });

  // Get availability status for a master
  const getAvailabilityStatus = (workload?: MasterWorkloadData) => {
    if (!workload) {
      return { status: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', ordersCount: 0 };
    }

    const ordersCount = workload.total_orders_today || 0;
    
    if (ordersCount === 0) {
      return { status: '–°–≤–æ–±–æ–¥–µ–Ω', ordersCount };
    } else if (ordersCount <= 2) {
      return { status: '–î–æ—Å—Ç—É–ø–µ–Ω', ordersCount };
    } else if (ordersCount <= 5) {
      return { status: '–ó–∞–Ω—è—Ç', ordersCount };
    } else {
      return { status: '–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω', ordersCount };
    }
  };

  // Get master display name
  const getMasterDisplayName = (master: Master): string => {
    if (master.full_name) {
      return master.full_name;
    }
    
    const firstName = master.first_name || '';
    const lastName = master.last_name || '';
    
    if (firstName || lastName) {
      return `${firstName} ${lastName}`.trim();
    }
    
    return master.email || `–ú–∞—Å—Ç–µ—Ä #${master.id}`;
  };

  // Get workload color based on orders count - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π —Ñ–æ–Ω)
  const getWorkloadColor = (ordersCount: number): string => {
    if (ordersCount === 0) return 'border-border bg-background text-foreground';
    if (ordersCount <= 2) return 'border-border bg-background text-foreground';
    if (ordersCount <= 5) return 'border-border bg-background text-foreground';
    return 'border-border bg-background text-foreground';
  };

  const handleAssign = () => {
    if (selectedMasterId && selectedSlot) {
      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ—Ç–æ–º
      const slotData = {
        masterId: selectedMasterId,
        scheduled_date: selectedSlot.date,
        scheduled_time: selectedSlot.start_time // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã, –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      };
      onAssign(selectedMasterId, slotData);
    } else if (selectedMasterId) {
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ backend)
      onAssign(selectedMasterId);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-7xl max-h-[90vh] overflow-hidden flex flex-col">,
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{orderId}
            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */}
            <span className="text-xs text-muted-foreground ml-auto">
              {masters.length > 0 ? `${masters.length} –º–∞—Å—Ç–µ—Ä–æ–≤` : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </span>
          </DialogTitle>
        </DialogHeader>

        <div className="flex-1 flex flex-col gap-4 min-h-0">
          {/* Search and Refresh */}
          <div className="flex gap-2">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Button
              variant="outline"
              size="icon"
              onClick={fetchMastersData}
              disabled={isLoading}
            >
              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          </div>

          {/* Error state - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
          {error && (
            <div className="bg-background dark:bg-background border border-destructive dark:border-destructive rounded-lg p-4">
              <div className="flex items-center gap-2 text-destructive dark:text-destructive mb-2">
                <AlertCircle className="h-4 w-4" />
                <span className="text-sm font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤</span>
              </div>
              <p className="text-sm text-destructive/80 dark:text-destructive/80 mb-3">{error}</p>
              <div className="flex gap-2">
                <Button 
                  size="sm" 
                  variant="outline" 
                  onClick={fetchMastersData}
                  disabled={isLoading}
                  className="text-destructive dark:text-destructive border-destructive/30 dark:border-destructive/30 hover:bg-background dark:hover:bg-background"
                >
                  <RefreshCw className={`h-3 w-3 mr-1 ${isLoading ? 'animate-spin' : ''}`} />
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
                <Button 
                  size="sm" 
                  variant="ghost" 
                  onClick={() => {
                    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
                    console.log('Token:', localStorage.getItem('token') ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    console.log('API URL:', process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000');
                    console.log('Masters count:', masters.length);
                    console.log('Current user role:', localStorage.getItem('userRole'));
                    toast.info('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞');
                  }}
                  className="text-muted-foreground"
                >
                  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                </Button>
              </div>
            </div>
          )}

          {/* Masters list */}
          <div className="flex-1 min-h-0 overflow-y-auto max-h-96">
            {isLoading ? (
              <div className="flex items-center justify-center py-8">
                <RefreshCw className="h-6 w-6 animate-spin mr-2" />
                –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...
              </div>
            ) : filteredMasters.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <AlertCircle className="h-8 w-8 mx-auto mb-2 opacity-50" />
                <p className="text-sm font-medium mb-1">
                  {searchTerm ? '–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤'}
                </p>
                {!searchTerm && masters.length === 0 && (
                  <div className="space-y-2">
                    <p className="text-xs opacity-75">
                      –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                    </p>
                    <div className="flex justify-center gap-2 mt-3">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        onClick={fetchMastersData}
                        disabled={isLoading}
                      >
                        <RefreshCw className={`h-3 w-3 mr-1 ${isLoading ? 'animate-spin' : ''}`} />
                        –û–±–Ω–æ–≤–∏—Ç—å
                      </Button>
                      <Button 
                        size="sm" 
                        variant="ghost" 
                        onClick={() => {
                          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:');
                          console.log('URL:', `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/users/masters/`);
                          console.log('Token:', localStorage.getItem('token') ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                          console.log('User role:', localStorage.getItem('userRole'));
                          toast.info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
                        }}
                      >
                        –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                      </Button>
                    </div>
                  </div>
                )}
                {!searchTerm && masters.length > 0 && (
                  <p className="text-xs opacity-75">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
                  </p>
                )}
              </div>
            ) : (
              <div className="space-y-2">
                {/* Enhanced Table Header - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
                <div className="grid grid-cols-12 gap-3 px-4 py-3 text-xs font-semibold text-muted-foreground bg-background dark:bg-background border border-border dark:border-border rounded-lg">
                  <div className="col-span-3">üë§ –ú–∞—Å—Ç–µ—Ä</div>
                  <div className="col-span-2">üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏</div>
                  <div className="col-span-3">üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã</div>
                  <div className="col-span-2">üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</div>
                  <div className="col-span-2">‚ö° –î–µ–π—Å—Ç–≤–∏–µ</div>
                </div>

                {/* Master rows with enhanced design */}
                <div className="space-y-1">
                  {filteredMasters.map((master) => {
                    const workload = mastersWorkload[master.id];
                    const availability = getAvailabilityStatus(workload);
                    const isSelected = selectedMasterId === master.id;
                    const ordersCount = workload?.total_orders_today || 0;

                    return (
                      <Card
                        key={master.id}
                        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                          isSelected 
                            ? 'ring-2 ring-primary bg-background border-primary' 
                            : 'hover:bg-accent/50 border-border/50'
                        }`}
                        onClick={() => setSelectedMasterId(master.id)}
                      >
                        <CardContent className="p-4">
                          <div className="grid grid-cols-12 gap-3 items-center">
                            {/* Enhanced Master info */}
                            <div className="col-span-3">
                              <div className="flex items-center gap-3">
                                <div className="flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center bg-muted dark:bg-muted text-muted-foreground dark:text-muted-foreground">
                                  <User className="h-5 w-5" />
                                </div>
                                <div className="min-w-0 flex-1">
                                  <p className="text-sm font-semibold truncate">
                                    {getMasterDisplayName(master)}
                                  </p>
                                  <p className="text-xs text-muted-foreground truncate">
                                    {master.email || '–ù–µ—Ç email'}
                                  </p>
                                </div>
                              </div>
                            </div>

                            {/* Enhanced Workload status */}
                            <div className="col-span-2">
                              <div className="flex flex-col gap-1">
                                <Badge
                                  variant="outline"
                                  className="text-xs px-2 py-1 font-medium border-border bg-background text-foreground"
                                >
                                  {ordersCount === 0 ? 'üü¢ –°–≤–æ–±–æ–¥–µ–Ω' :
                                   ordersCount <= 2 ? 'üü° –î–æ—Å—Ç—É–ø–µ–Ω' :
                                   ordersCount <= 5 ? 'üü† –ó–∞–Ω—è—Ç' : 'üî¥ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω'}
                                </Badge>
                                <div className="text-xs text-muted-foreground">
                                  –ù–∞–≥—Ä—É–∑–∫–∞: {ordersCount}/8 –∑–∞–∫–∞–∑–æ–≤
                                </div>
                              </div>
                            </div>

                            {/* Enhanced Available slots display */}
                            <div className="col-span-3">
                              {workload?.availability_slots && workload.availability_slots.length > 0 ? (
                                <div className="text-xs space-y-1">
                                  <div className="flex items-center gap-1 text-muted-foreground mb-1">
                                    <Calendar className="h-3 w-3" />
                                    <span className="font-medium">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã ({workload.availability_slots.length})</span>
                                  </div>
                                  {/* Show first 2-3 available slots */}
                                  {workload.availability_slots.slice(0, 3).map((slot, index) => (
                                    <div key={index} className="flex items-center gap-1 text-muted-foreground">
                                      <Clock className="h-3 w-3" />
                                      <span className="font-medium">
                                        {new Date(slot.date).toLocaleDateString('ru-RU', {
                                          day: '2-digit',
                                          month: '2-digit'
                                        })} {slot.start_time}-{slot.end_time}
                                      </span>
                                    </div>
                                  ))}
                                  {workload.availability_slots.length > 3 && (
                                    <div className="text-xs text-muted-foreground">
                                      +{workload.availability_slots.length - 3} –µ—â–µ...
                                    </div>
                                  )}
                                  <div className="text-xs text-foreground">
                                    ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
                                  </div>
                                </div>
                              ) : (
                                <div className="text-xs text-center">
                                  <div className="text-destructive dark:text-destructive font-medium">‚ùå –ù–µ—Ç —Å–ª–æ—Ç–æ–≤</div>
                                  <div className="text-muted-foreground">–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
                                </div>
                              )}
                            </div>

                            {/* Enhanced Orders count */}
                            <div className="col-span-2">
                              <div className="text-center">
                                <div className="text-lg font-bold text-foreground">
                                  {ordersCount}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                                </div>
                                {workload && Object.keys(workload.orders_count_by_date || {}).length > 0 && (
                                  <div className="text-xs text-muted-foreground mt-1">
                                    üìÖ {Object.keys(workload.orders_count_by_date).length} –¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                                  </div>
                                )}
                              </div>
                            </div>

                            {/* Enhanced Action button */}
                            <div className="col-span-2">                                <Button
                                size="sm"
                                variant={isSelected ? "default" : "outline"}
                                className={`w-full font-medium ${
                                  isSelected 
                                    ? 'bg-primary hover:bg-primary/90 text-primary-foreground' 
                                    : 'hover:bg-accent hover:border-border'
                                }`}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setSelectedMasterId(master.id);
                                  setSelectedSlot(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Å—Ç–µ—Ä–∞
                                }}
                              >
                                {isSelected ? (
                                  <>
                                    <CheckCircle className="h-3 w-3 mr-1" />
                                    –í—ã–±—Ä–∞–Ω
                                  </>
                                ) : (
                                  '–í—ã–±—Ä–∞—Ç—å'
                                )}
                              </Button>
                            </div>
                          </div>

                          {/* Expandable details section */}
                          {isSelected && workload && (
                            <div className="mt-4 pt-4 border-t border-border">
                              <div className="grid grid-cols-1 gap-4 text-xs">
                                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                <div className="space-y-2">
                                  <h4 className="font-semibold text-muted-foreground">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                                  <div className="space-y-1">
                                    <div className="flex justify-between">
                                      <span>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</span>
                                      <span className="font-medium">{workload.total_orders_today}</span>
                                    </div>
                                    <div className="flex justify-between">
                                      <span>–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:</span>
                                      <span className="font-medium">
                                        {workload.availability_slots?.length || 0}
                                      </span>
                                    </div>
                                  </div>
                                </div>

                                {/* –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã */}
                                {workload.availability_slots && workload.availability_slots.length > 0 && (
                                  <div className="space-y-2">
                                    <h4 className="font-semibold text-muted-foreground">üïí –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã</h4>
                                    <div className="max-h-32 overflow-y-auto space-y-1 bg-muted/20 p-2 rounded">
                                      {workload.availability_slots.map((slot, index) => (
                                        <div key={index} className="flex justify-between items-center py-1 px-2 bg-background rounded text-xs">
                                          <span className="font-medium">
                                            {new Date(slot.date).toLocaleDateString('ru-RU', {
                                              day: '2-digit',
                                              month: '2-digit',
                                              year: '2-digit'
                                            })}
                                          </span>
                                          <span className="text-muted-foreground">
                                            {slot.start_time} - {slot.end_time}
                                          </span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}

                                {/* –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏ */}
                                {Object.keys(workload.orders_count_by_date || {}).length > 0 && (
                                  <div className="space-y-2">
                                    <h4 className="font-semibold text-muted-foreground">üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏</h4>
                                    <div className="space-y-1">
                                      {Object.entries(workload.orders_count_by_date || {}).slice(0, 5).map(([date, count]) => (
                                        <div key={date} className="flex justify-between">
                                          <span>{new Date(date).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}:</span>
                                          <span className="font-medium">{count} –∑–∞–∫–∞–∑–æ–≤</span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </div>
            )}
          </div>

          {/* Slot Selection Section */}
          {selectedMasterId && mastersWorkload[selectedMasterId]?.availability_slots && (
            <div className="border-t pt-4">
              <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                <span className="text-sm font-normal text-muted-foreground">
                  (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞)
                </span>
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-48 overflow-y-auto">
                {mastersWorkload[selectedMasterId].availability_slots.map((slot, index) => {
                  const isSlotSelected = selectedSlot?.date === slot.date && selectedSlot?.start_time === slot.start_time;
                  
                  return (
                    <Card
                      key={index}
                      className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                        isSlotSelected 
                          ? 'ring-2 ring-green-500 bg-green-50 border-green-200' 
                          : 'hover:bg-accent/50 border-border/50'
                      }`}
                      onClick={() => setSelectedSlot(isSlotSelected ? null : slot)}
                    >
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium text-sm">
                              {new Date(slot.date).toLocaleDateString('ru-RU', {
                                day: '2-digit',
                                month: '2-digit',
                                year: '2-digit'
                              })}
                            </div>
                            <div className="text-xs text-muted-foreground flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              {slot.start_time} - {slot.end_time}
                            </div>
                          </div>
                          {isSlotSelected && (
                            <CheckCircle className="h-4 w-4 text-green-500" />
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>

              {selectedSlot && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center gap-2 text-green-700">
                    <CheckCircle className="h-4 w-4" />
                    <span className="text-sm font-medium">
                      –í—ã–±—Ä–∞–Ω–æ: {new Date(selectedSlot.date).toLocaleDateString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric'
                      })} –≤ {selectedSlot.start_time} - {selectedSlot.end_time}
                    </span>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        <Separator />

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={loading}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleAssign}
            disabled={!selectedMasterId || loading || isLoading}
          >
            {loading ? (
              <>
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ...
              </>
            ) : selectedSlot ? (
              `–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ ${selectedSlot.start_time}`
            ) : (
              '–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default OrderAssignmentPanel;
