#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
 */

const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

function getTestScheduleData() {
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(today.getDate() + 1);
  const dayAfterTomorrow = new Date(today);
  dayAfterTomorrow.setDate(today.getDate() + 2);

  return {
    schedule: [
      {
        date: tomorrow.toISOString().split('T')[0], // YYYY-MM-DD
        slots: [
          { start_time: '09:00', end_time: '10:00' },
          { start_time: '10:00', end_time: '11:00' },
          { start_time: '14:00', end_time: '15:00' }
        ]
      },
      {
        date: dayAfterTomorrow.toISOString().split('T')[0], // YYYY-MM-DD
        slots: [
          { start_time: '09:00', end_time: '10:00' },
          { start_time: '16:00', end_time: '17:00' }
        ]
      }
    ]
  };
}

async function testScheduleSaveAndLoad(token, masterId) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
  console.log('üìç API URL:', baseUrl);
  console.log('üë§ Master ID:', masterId);
  
  const scheduleData = getTestScheduleData();
  console.log('üìÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', JSON.stringify(scheduleData, null, 2));
  
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    console.log('\nüíæ 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    const saveResponse = await fetch(`${baseUrl}/api/master/schedule/${masterId}/`, {
      method: 'POST',
      headers: {
        'Authorization': `Token ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(scheduleData)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveResponse.status);
    
    if (saveResponse.ok) {
      const saveResult = await saveResponse.json();
      console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', saveResult);
    } else {
      const errorText = await saveResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', errorText);
      return false;
    }
    
    // 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('\nüìã 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    const loadResponse = await fetch(`${baseUrl}/api/master/schedule/${masterId}/`, {
      method: 'GET',
      headers: {
        'Authorization': `Token ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏:', loadResponse.status);
    
    if (loadResponse.ok) {
      const loadResult = await loadResponse.json();
      console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', JSON.stringify(loadResult, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      if (loadResult.schedule && loadResult.schedule.length > 0) {
        console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ—Ç—ã!');
        return true;
      } else {
        console.log('‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        return false;
      }
    } else {
      const errorText = await loadResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', errorText);
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    return false;
  }
}

async function testWorkloadAPI(token, masterId) {
  console.log('\nüîÑ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API workload...');
  
  try {
    const workloadResponse = await fetch(`${baseUrl}/api/masters/${masterId}/workload/`, {
      headers: {
        'Authorization': `Token ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–°—Ç–∞—Ç—É—Å workload API:', workloadResponse.status);
    
    if (workloadResponse.ok) {
      const workloadData = await workloadResponse.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ workload:', {
        master_id: workloadData.master_id,
        availability_slots_count: workloadData.availability_slots?.length || 0,
        total_orders_today: workloadData.total_orders_today,
        has_next_available_slot: !!workloadData.next_available_slot
      });
      
      if (workloadData.availability_slots && workloadData.availability_slots.length > 0) {
        console.log('‚úÖ Workload API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ—Ç—ã!');
        console.log('üìã –ü–µ—Ä–≤—ã–π —Å–ª–æ—Ç:', workloadData.availability_slots[0]);
        return true;
      } else {
        console.log('‚ùå Workload API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ—Ç—ã!');
        return false;
      }
    } else {
      const errorText = await workloadResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ workload API:', errorText);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ workload —Ç–µ—Å—Ç–∞:', error.message);
    return false;
  }
}

function printInstructions() {
  console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:');
  console.log('1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (localStorage.getItem("token"))');
  console.log('2. –ü–æ–ª—É—á–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /users/masters/ API)');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-schedule-fix.mjs --token YOUR_TOKEN --master-id MASTER_ID');
  console.log('');
  console.log('–ü—Ä–∏–º–µ—Ä:');
  console.log('node test-schedule-fix.mjs --token abc123def456 --master-id 1');
}

async function runTests() {
  const args = process.argv.slice(2);
  const tokenIndex = args.indexOf('--token');
  const masterIdIndex = args.indexOf('--master-id');
  
  if (tokenIndex === -1 || masterIdIndex === -1) {
    printInstructions();
    return;
  }
  
  const token = args[tokenIndex + 1];
  const masterId = args[masterIdIndex + 1];
  
  if (!token || !masterId) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –∏ ID –º–∞—Å—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!');
    printInstructions();
    return;
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
  
  try {
    // –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const scheduleTest = await testScheduleSaveAndLoad(token, masterId);
    
    // –¢–µ—Å—Ç 2: API workload
    const workloadTest = await testWorkloadAPI(token, masterId);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:');
    console.log(`üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${scheduleTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`üîÑ Workload API: ${workloadTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
    
    if (scheduleTest && workloadTest) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export { testScheduleSaveAndLoad, testWorkloadAPI };
