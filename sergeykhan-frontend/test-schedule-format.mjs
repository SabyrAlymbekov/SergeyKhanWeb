#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */

function testDataFormat() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–∞–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  const timeSlots = [
    { time: '09:00', display: '09:00-10:00' },
    { time: '10:00', display: '10:00-11:00' },
    { time: '11:00', display: '11:00-12:00' },
    { time: '12:00', display: '12:00-13:00' },
    { time: '13:00', display: '13:00-14:00' },
    { time: '14:00', display: '14:00-15:00' },
    { time: '15:00', display: '15:00-16:00' },
    { time: '16:00', display: '16:00-17:00' },
    { time: '17:00', display: '17:00-18:00' },
  ];
  
  // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ frontend
  const workDays = [
    {
      date: '2025-06-16',
      day: '–ü–Ω 16.6',
      isSelected: true,
      selectedSlots: ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00'] // –ö–∞–∫ –≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    }
  ];
  
  console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ frontend:', workDays);
  
  // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const scheduleData = workDays
    .filter(day => day.isSelected && day.selectedSlots.length > 0)
    .map(day => ({
      date: day.date,
      slots: day.selectedSlots.map(timeSlot => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç start_time –∏ end_time
        const currentSlot = timeSlots.find(slot => slot.time === timeSlot);
        if (!currentSlot) {
          throw new Error(`Invalid time slot: ${timeSlot}`);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∏–∑ display
        const [start_time, end_time] = currentSlot.display.split('-');
        return {
          start_time: start_time,
          end_time: end_time
        };
      })
    }));
  
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ backend:');
  console.log(JSON.stringify({ schedule: scheduleData }, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (–∫–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...');
  
  const backendResponse = {
    success: true,
    schedule: scheduleData,
    master_id: 1,
    total_slots: 6
  };
  
  console.log('üì• –î–∞–Ω–Ω—ã–µ —Å backend:', JSON.stringify(backendResponse, null, 2));
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  const updatedDays = [{
    date: '2025-06-16',
    day: '–ü–Ω 16.6',
    isSelected: false,
    selectedSlots: []
  }].map(day => {
    const serverDay = backendResponse.schedule.find(d => d.date === day.date);
    if (serverDay && serverDay.slots && serverDay.slots.length > 0) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –∏–∑ backend —Ñ–æ—Ä–º–∞—Ç–∞ –≤ frontend —Ñ–æ—Ä–º–∞—Ç
      const selectedSlots = serverDay.slots.map(slot => {
        // –ò–∑ backend –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–±—ä–µ–∫—Ç—ã —Å start_time –∏ end_time
        // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π timeSlot
        const matchingTimeSlot = timeSlots.find(ts => {
          const [start, end] = ts.display.split('-');
          return start === slot.start_time && end === slot.end_time;
        });
        return matchingTimeSlot ? matchingTimeSlot.time : slot.start_time;
      }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
      
      return {
        ...day,
        isSelected: true,
        selectedSlots: selectedSlots
      };
    }
    return day;
  });
  
  console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ frontend:', updatedDays);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
  const originalSlots = workDays[0].selectedSlots.sort();
  const restoredSlots = updatedDays[0].selectedSlots.sort();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log('–ò—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:', originalSlots);
  console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:', restoredSlots);
  console.log('–°–æ–≤–ø–∞–¥–∞—é—Ç:', JSON.stringify(originalSlots) === JSON.stringify(restoredSlots) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
  
  return JSON.stringify(originalSlots) === JSON.stringify(restoredSlots);
}

function printValidationRules() {
  console.log('\nüìù –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backend:');
  console.log('1. –ö–∞–∂–¥—ã–π —Å–ª–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è "start_time" –∏ "end_time"');
  console.log('2. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"');
  console.log('3. end_time –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ start_time');
  console.log('4. –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"');
  console.log('5. –î–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
  
  console.log('\nüìã –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:');
  console.log(`{
  "schedule": [
    {
      "date": "2025-06-16",
      "slots": [
        { "start_time": "09:00", "end_time": "10:00" },
        { "start_time": "10:00", "end_time": "11:00" }
      ]
    }
  ]
}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
const success = testDataFormat();
printValidationRules();

console.log('\nüéØ –ò–¢–û–ì:', success ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' : '‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù');

if (success) {
  console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.');
} else {
  console.log('\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
}
