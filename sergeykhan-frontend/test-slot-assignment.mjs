#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
 */

const API_BASE = 'http://127.0.0.1:8000';
const TOKEN = 'babcb6304b44079f8c931b536731160ab7969603'; // –¢–æ–∫–µ–Ω —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞

async function makeRequest(endpoint, method = 'GET', data = null) {
    const url = `${API_BASE}${endpoint}`;
    const options = {
        method,
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Token ${TOKEN}`
        }
    };
    
    if (data) {
        options.body = JSON.stringify(data);
    }
    
    console.log(`üì° ${method} ${url}`);
    if (data) console.log('üì§ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    
    const response = await fetch(url, options);
    const result = await response.text();
    
    console.log(`üì• –°—Ç–∞—Ç—É—Å: ${response.status}`);
    
    try {
        const jsonResult = JSON.parse(result);
        console.log('üìã –û—Ç–≤–µ—Ç:', JSON.stringify(jsonResult, null, 2));
        return { status: response.status, data: jsonResult };
    } catch (e) {
        console.log('üìã –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', result);
        return { status: response.status, data: result };
    }
}

async function testSlotAssignment() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ—Ç–∞');
    console.log('=' * 60);
    
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        console.log('\nüìã 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...');
        const ordersResponse = await makeRequest('/api/orders/all/');
        
        if (!ordersResponse.data || !Array.isArray(ordersResponse.data)) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤');
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        const unassignedOrder = ordersResponse.data.find(order => 
            !order.assigned_master && 
            ['–Ω–æ–≤—ã–π', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'].includes(order.status)
        );
        
        if (!unassignedOrder) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞');
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞: #${unassignedOrder.id} (${unassignedOrder.status})`);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∏—Ö —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏
        console.log('\nüë• 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤...');
        const mastersResponse = await makeRequest('/api/masters/workload/all/');
        
        if (!mastersResponse.data || !Array.isArray(mastersResponse.data)) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤');
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        const masterWithSlots = mastersResponse.data.find(master => 
            master.next_available_slot !== null
        );
        
        if (!masterWithSlots) {
            console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏');
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä —Å —Å–ª–æ—Ç–∞–º–∏: ${masterWithSlots.master_email}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –º–∞—Å—Ç–µ—Ä–∞
        console.log('\nüìÖ 3. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞...');
        const slotsResponse = await makeRequest(`/api/masters/${masterWithSlots.master_id}/availability/`);
        
        if (!slotsResponse.data || !Array.isArray(slotsResponse.data) || slotsResponse.data.length === 0) {
            console.log('‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
            return;
        }
        
        console.log(`üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: ${slotsResponse.data.length}`);
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
        const selectedSlot = slotsResponse.data[0];
        console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç: ${selectedSlot.date} ${selectedSlot.start_time}-${selectedSlot.end_time}`);
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ—Ç–∞ (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
        console.log('\nüîß 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å–ª–æ—Ç–∞...');
        const assignResponse1 = await makeRequest(`/assign/${unassignedOrder.id}/`, 'PATCH', {
            assigned_master: masterWithSlots.master_id
        });
        
        if (assignResponse1.status === 200) {
            console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            await makeRequest(`/assign/${unassignedOrder.id}/remove/`, 'PATCH');
            console.log('üîÑ –°–±—Ä–æ—à–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞');
        } else {
            console.log(`‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: ${assignResponse1.status}`);
        }
        
        // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        console.log('\nüéØ 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞...');
        const assignResponse2 = await makeRequest(`/assign/${unassignedOrder.id}/`, 'PATCH', {
            assigned_master: masterWithSlots.master_id,
            scheduled_date: selectedSlot.date,
            scheduled_time: selectedSlot.start_time // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–µ–∫—É–Ω–¥—ã
        });
        
        if (assignResponse2.status === 200) {
            console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ—Ç–æ–º –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:');
            console.log(`   - –ú–∞—Å—Ç–µ—Ä: ${assignResponse2.data.assigned_master_email || 'ID ' + assignResponse2.data.assigned_master}`);
            console.log(`   - –î–∞—Ç–∞: ${assignResponse2.data.scheduled_date || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`   - –í—Ä–µ–º—è: ${assignResponse2.data.scheduled_time || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        } else {
            console.log(`‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ—Ç–æ–º –Ω–µ —É–¥–∞–ª–æ—Å—å: ${assignResponse2.status}`);
        }
        
        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
        console.log('\n‚ö†Ô∏è  6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è...');
        const conflictResponse = await makeRequest(`/assign/${unassignedOrder.id}/`, 'PATCH', {
            assigned_master: masterWithSlots.master_id,
            scheduled_date: selectedSlot.date,
            scheduled_time: selectedSlot.start_time
        });
        
        if (conflictResponse.status >= 400) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏!');
            console.log(`üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${conflictResponse.data.error || conflictResponse.data}`);
        } else {
            console.log('‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        }
        
        console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSlotAssignment();
