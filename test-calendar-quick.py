#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è garant-master
"""
import requests
import json
import sys
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"
headers = {"Content-Type": "application/json"}

def test_login_and_get_token():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    user_data = {
        "email": "test_master_calendar@example.com",
        "password": "testpass123",
        "role": "master",
        "first_name": "Test",
        "last_name": "Master",
        "phone": "+77071234567"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.post(f"{BASE_URL}/api/users/create/", json=user_data, headers=headers)
        if response.status_code in [200, 201]:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        login_data = {
            "email": user_data["email"],
            "password": user_data["password"]
        }
        
        response = requests.post(f"{BASE_URL}/login/", json=login_data, headers=headers)
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            user_id = data.get('user', {}).get('id')
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. Token: {token[:20]}..., User ID: {user_id}")
            return token, user_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None

def test_calendar_endpoints(token, user_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Token {token}"
    }
    
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ endpoints...")
    
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /mine - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –º–∞—Å—Ç–µ—Ä–∞")
    try:
        response = requests.get(f"{BASE_URL}/mine", headers=auth_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            events = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /create/ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    now = datetime.now()
    start_time = now + timedelta(hours=1)
    end_time = start_time + timedelta(hours=2)
    
    event_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
        "start": start_time.strftime("%Y-%m-%dT%H:%M:%S"),
        "end": end_time.strftime("%Y-%m-%dT%H:%M:%S"),
        "color": "#3B82F6"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/create/", json=event_data, headers=auth_headers)
        print(f"Status: {response.status_code}")
        if response.status_code in [200, 201]:
            created_event = response.json()
            event_id = created_event.get('id')
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}")
            
            # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            if event_id:
                print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT /update/{event_id}/ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
                update_data = {
                    "start": (start_time + timedelta(minutes=30)).strftime("%Y-%m-%dT%H:%M:%S"),
                    "end": (end_time + timedelta(minutes=30)).strftime("%Y-%m-%dT%H:%M:%S")
                }
                
                try:
                    response = requests.put(f"{BASE_URL}/update/{event_id}/", json=update_data, headers=auth_headers)
                    print(f"Status: {response.status_code}")
                    if response.status_code == 200:
                        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                
                # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /delete/{event_id}/ - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
                try:
                    response = requests.delete(f"{BASE_URL}/delete/{event_id}/", headers=auth_headers)
                    print(f"Status: {response.status_code}")
                    if response.status_code == 204:
                        print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–Ω–æ–≤–∞
    print("\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤")
    try:
        response = requests.get(f"{BASE_URL}/mine", headers=auth_headers)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            events = response.json()
            print(f"‚úÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ {len(events)} —Å–æ–±—ã—Ç–∏–π")
            for event in events:
                print(f"  - {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({event.get('start', '')})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è garant-master")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token, user_id = test_login_and_get_token()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_calendar_endpoints(token, user_id)
    
    print("\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
