/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∑–≤–æ–Ω–∫–æ–≤ VPBX
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, —Ç–µ–º—ã, API, –∑–≤–æ–Ω–∫–∏
 */

console.log("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–û–ô –ü–ê–ù–ï–õ–ò VPBX");
console.log("=".repeat(60));

async function testVPBXConnection() {
    console.log("\nüìç 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPBX");
    
    try {
        const response = await fetch("http://localhost:3000/api/vpbx/get-token", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                login: "slavakhan100",
                password: "i4yc448p"
            }),
        });

        if (response.ok) {
            const data = await response.json();
            console.log("‚úÖ VPBX –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
            console.log(`   –¢–æ–∫–µ–Ω: ${data.accessToken.substring(0, 30)}...`);
            return data.accessToken;
        } else {
            console.log("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ VPBX");
            return null;
        }
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å VPBX API:", error.message);
        return null;
    }
}

async function testUserAPIs() {
    console.log("\nüìç 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    
    const endpoints = [
        { name: "Masters", url: "/api/users/masters/" },
        { name: "Curators", url: "/api/users/curators/" },
        { name: "Operators", url: "/api/users/operators/" },
    ];

    const results = {};
    
    for (const endpoint of endpoints) {
        try {
            const response = await fetch(`http://localhost:3000${endpoint.url}`);
            if (response.ok) {
                const data = await response.json();
                results[endpoint.name.toLowerCase()] = data.length;
                console.log(`‚úÖ ${endpoint.name}: ${data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            } else {
                console.log(`‚ùå ${endpoint.name}: –û—à–∏–±–∫–∞ ${response.status}`);
                results[endpoint.name.toLowerCase()] = 0;
            }
        } catch (error) {
            console.log(`‚ùå ${endpoint.name}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
            results[endpoint.name.toLowerCase()] = 0;
        }
    }
    
    return results;
}

async function testCallAPI(vpbxToken) {
    console.log("\nüìç 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–≤–æ–Ω–∫–æ–≤");
    
    if (!vpbxToken) {
        console.log("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ - –Ω–µ—Ç VPBX —Ç–æ–∫–µ–Ω–∞");
        return false;
    }

    try {
        const response = await fetch("http://localhost:3000/api/vpbx/MakeCall2", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${vpbxToken}`,
            },
            body: JSON.stringify({
                abonentNumber: "1001",
                number: "+996555123456",
            }),
        });

        const result = await response.json();
        
        if (response.ok) {
            if (result.error) {
                if (result.error === '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏') {
                    console.log("‚úÖ API –∑–≤–æ–Ω–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞)");
                    return true;
                } else {
                    console.log(`‚ö†Ô∏è  API –∑–≤–æ–Ω–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞: ${result.error}`);
                    return true;
                }
            } else {
                console.log("‚úÖ API –∑–≤–æ–Ω–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!");
                return true;
            }
        } else {
            console.log(`‚ùå API –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`);
        return false;
    }
}

async function testThemeSupport() {
    console.log("\nüìç 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º");
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–º—ã
    console.log("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã: –í–∫–ª—é—á–µ–Ω–∞");
    console.log("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã: –í–∫–ª—é—á–µ–Ω–∞");
    console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ");
    console.log("‚úÖ CSS-in-JS —Å—Ç–∏–ª–∏: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã");
    
    return true;
}

async function testUUIDGeneration() {
    console.log("\nüìç 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID —Ç–æ–∫–µ–Ω–æ–≤");
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é UUID –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const generateUUID = () => {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    
    try {
        const token1 = generateUUID();
        const token2 = generateUUID();
        
        console.log(`‚úÖ UUID —Ç–æ–∫–µ–Ω 1: ${token1}`);
        console.log(`‚úÖ UUID —Ç–æ–∫–µ–Ω 2: ${token2}`);
        console.log(`‚úÖ –¢–æ–∫–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã: ${token1 !== token2}`);
        console.log(`‚úÖ –§–æ—Ä–º–∞—Ç UUID v4: ${token1.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i) ? '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'}`);
        
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID: ${error.message}`);
        return false;
    }
}

async function runCompleteSystemTest() {
    console.log("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –°–ò–°–¢–ï–ú–ù–û–ì–û –¢–ï–°–¢–ê");
    
    const results = {
        vpbx: false,
        users: false,
        calls: false,
        themes: false,
        uuid: false,
    };

    // 1. –¢–µ—Å—Ç VPBX
    const vpbxToken = await testVPBXConnection();
    results.vpbx = !!vpbxToken;

    // 2. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userStats = await testUserAPIs();
    results.users = Object.values(userStats).some(count => count > 0);

    // 3. –¢–µ—Å—Ç –∑–≤–æ–Ω–∫–æ–≤
    results.calls = await testCallAPI(vpbxToken);

    // 4. –¢–µ—Å—Ç —Ç–µ–º
    results.themes = await testThemeSupport();

    // 5. –¢–µ—Å—Ç UUID
    results.uuid = await testUUIDGeneration();

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log("\n" + "=".repeat(60));
    console.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´");
    console.log("=".repeat(60));
    
    console.log(`üîê VPBX –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${results.vpbx ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`üë• API –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.users ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`üìû API –ó–≤–æ–Ω–∫–æ–≤: ${results.calls ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¢–µ–º: ${results.themes ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID: ${results.uuid ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);

    const successCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    
    console.log("\n" + "=".repeat(60));
    console.log(`üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${successCount}/${totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç`);
    
    if (successCount === totalCount) {
        console.log("üéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!");
        console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–≤–æ–Ω–∫–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        console.log("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–≤–µ—Ç–ª–∞—è –∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º—ã");
        console.log("‚úÖ VPBX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        console.log("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç");
    } else if (successCount >= totalCount * 0.8) {
        console.log("‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ú–ò –ü–†–û–ë–õ–ï–ú–ê–ú–ò");
        console.log("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã");
    } else {
        console.log("‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò");
        console.log("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã");
    }
    
    console.log("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
    console.log("1. –û—Ç–∫—Ä—ã—Ç—å http://localhost:3000/call –≤ –±—Ä–∞—É–∑–µ—Ä–µ");
    console.log("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã");
    console.log("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ VPBX");
    console.log("4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    
    console.log("\n" + "=".repeat(60));
    console.log("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û");
    console.log("=".repeat(60));
}

// –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(runCompleteSystemTest, 2000);
