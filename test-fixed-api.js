/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API –∑–≤–æ–Ω–∫–æ–≤
 */

const BASE_URL = "http://localhost:3000";

async function testLogin() {
    console.log("üìç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API...");
    
    const response = await fetch(`${BASE_URL}/api/vpbx/get-token`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            login: "slavakhan100",
            password: "i4yc448p"
        }),
    });

    if (response.ok) {
        const data = await response.json();
        console.log("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", data.accessToken.substring(0, 20) + '...');
        return data.accessToken;
    } else {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", await response.text());
        return null;
    }
}

async function testCall(token) {
    console.log("\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API...");
    
    const response = await fetch(`${BASE_URL}/api/vpbx/MakeCall2`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`,
        },
        body: JSON.stringify({
            abonentNumber: "101",
            number: "+996555123456",
        }),
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    if (responseText.startsWith('{')) {
        const data = JSON.parse(responseText);
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç:", data);
        
        if (data.error) {
            if (data.error === '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏') {
                console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –Ω–æ —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å! API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
                return true; // –≠—Ç–æ —É—Å–ø–µ—Ö - API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            } else {
                console.log("‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", data.error);
                return false;
            }
        } else {
            console.log("üéâ –ó–í–û–ù–û–ö –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù!");
            return true;
        }
    } else {
        if (responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É')) {
            console.log("‚ùå –í—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
            return false;
        } else {
            console.log("‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", responseText.substring(0, 200));
            return false;
        }
    }
}

async function runTest() {
    console.log("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ó–í–û–ù–ö–ò");
    console.log("=".repeat(50));
    
    try {
        const token = await testLogin();
        if (!token) {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
            return;
        }
        
        const callSuccess = await testCall(token);
        
        if (callSuccess) {
            console.log("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!");
            console.log("‚úÖ API —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω");
            console.log("‚úÖ VPBX –æ—Ç–≤–µ—á–∞–µ—Ç JSON –≤–º–µ—Å—Ç–æ HTML");
            console.log("‚úÖ –ó–≤–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏");
        } else {
            console.log("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ");
            console.log("–ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É");
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:", error.message);
    }
}

// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
setTimeout(runTest, 3000);
