#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è garant-master —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
"""
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"
FRONTEND_URL = "http://localhost:3000"

def create_garant_master_user():
    """–°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è garant-master"""
    print("üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è garant-master...")
    
    user_data = {
        "email": "garant_master@example.com",
        "password": "garant123",
        "role": "master",
        "first_name": "Garant",
        "last_name": "Master",
        "phone": "+77071234999"
    }
    
    headers = {"Content-Type": "application/json"}
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.post(f"{BASE_URL}/api/users/create/", json=user_data, headers=headers)
        if response.status_code in [200, 201]:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å garant-master —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {response.status_code}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        login_data = {
            "email": user_data["email"],
            "password": user_data["password"]
        }
        
        response = requests.post(f"{BASE_URL}/login/", json=login_data, headers=headers)
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            user_id = data.get('user', {}).get('id')
            
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            print(f"üìß Email: {user_data['email']}")
            print(f"üîë Password: {user_data['password']}")
            print(f"üÜî User ID: {user_id}")
            print(f"üîó Token: {token}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            create_sample_events(token)
            
            return user_id, token
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def create_sample_events(token):
    """–°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    print("\nüìÖ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è...")
    
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Token {token}"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    base_date = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
    
    sample_events = [
        {
            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
            "start": base_date.strftime("%Y-%m-%dT%H:%M:%S"),
            "end": (base_date + timedelta(hours=2)).strftime("%Y-%m-%dT%H:%M:%S"),
            "color": "#3B82F6"
        },
        {
            "title": "–ü–ª–∞–Ω–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
            "start": (base_date + timedelta(hours=3)).strftime("%Y-%m-%dT%H:%M:%S"),
            "end": (base_date + timedelta(hours=4)).strftime("%Y-%m-%dT%H:%M:%S"),
            "color": "#10B981"
        },
        {
            "title": "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
            "start": (base_date + timedelta(days=1, hours=1)).strftime("%Y-%m-%dT%H:%M:%S"),
            "end": (base_date + timedelta(days=1, hours=5)).strftime("%Y-%m-%dT%H:%M:%S"),
            "color": "#F59E0B"
        }
    ]
    
    created_count = 0
    for event_data in sample_events:
        try:
            response = requests.post(f"{BASE_URL}/create/", json=event_data, headers=auth_headers)
            if response.status_code in [200, 201]:
                created_count += 1
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {event_data['title']}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {event_data['title']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {created_count} –∏–∑ {len(sample_events)} —Å–æ–±—ã—Ç–∏–π")

def main():
    print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è garant-master")
    print("=" * 50)
    
    user_id, token = create_garant_master_user()
    
    if user_id and token:
        print(f"\nüåü –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ garant-master:")
        print(f"   URL: {FRONTEND_URL}")
        print(f"   Email: garant_master@example.com")
        print(f"   Password: garant123")
        print(f"   User ID: {user_id}")
        print(f"\nüìÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å {FRONTEND_URL}/calendar –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å!")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    main()
