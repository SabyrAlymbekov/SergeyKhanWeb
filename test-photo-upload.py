#!/usr/bin/env python3

import requests
import json
import os
from datetime import datetime
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://127.0.0.1:8000"
EMAIL = "test_master@completion.com"  # —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä
PASSWORD = "test123"                  # –ø–∞—Ä–æ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞

def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    login_data = {
        "email": EMAIL,
        "password": PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/login/", json=login_data)
    if response.status_code == 200:
        token = response.json().get("token")
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω: {token[:20]}...")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        print(response.text)
        return None

def create_test_image(filename="test_photo.jpg"):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 200x200
    img = Image.new('RGB', (200, 200), color='red')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='JPEG')
    img_bytes.seek(0)
    
    return img_bytes

def create_test_order_with_photos(token):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    master_id = 13  # ID –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Django shell
    import subprocess
    create_order_script = f'''
from api1.models import CustomUser, Order
from datetime import date, time

master = CustomUser.objects.get(id={master_id})
test_order = Order.objects.create(
    client_name="–¢–µ—Å—Ç —Å —Ñ–æ—Ç–æ",
    client_phone="+77771234567",
    description="–ó–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
    address="–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
    street="–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞",
    house_number="123",
    status="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
    assigned_master=master,
    scheduled_date=date.today(),
    scheduled_time=time(10, 0),
    estimated_cost=2000.00
)
print(test_order.id)
'''
    
    result = subprocess.run([
        "python3", "manage.py", "shell", "-c", create_order_script
    ], cwd="/Users/bekzhan/Documents/projects/soso/sergeykhan-backend/app1", 
    capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {result.stderr}")
        return None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—ã–≤–æ–¥–∞
    order_id = None
    for line in result.stdout.strip().split('\n'):
        if line.strip().isdigit():
            order_id = int(line.strip())
            break
    
    if not order_id:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—ã–≤–æ–¥–∞: {result.stdout}")
        return None
        
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order_id}")
    return order_id

def test_completion_with_photos(token, order_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    headers = {
        "Authorization": f"Token {token}"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo1 = create_test_image("photo1.jpg")
    photo2 = create_test_image("photo2.jpg")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å —Ñ–∞–π–ª–∞–º–∏
    files = [
        ('completion_photos', ('photo1.jpg', photo1, 'image/jpeg')),
        ('completion_photos', ('photo2.jpg', photo2, 'image/jpeg'))
    ]
    
    form_data = {
        "order": str(order_id),
        "work_description": "–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
        "parts_expenses": "150.00",
        "transport_costs": "75.00",
        "total_received": "2500.00",
        "completion_date": datetime.now().isoformat()
    }
    
    print(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
    print(f"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {form_data}")
    print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    response = requests.post(
        f"{BASE_URL}/api/orders/{order_id}/complete/",
        headers=headers,
        data=form_data,
        files=files
    )
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    print(f"–û—Ç–≤–µ—Ç: {response.text}")
    
    if response.status_code == 201:
        completion_data = response.json()
        photos = completion_data.get('completion_photos', [])
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
        for i, photo in enumerate(photos):
            print(f"  {i+1}. {photo}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        for photo_path in photos:
            full_path = f"/Users/bekzhan/Documents/projects/soso/sergeykhan-backend/app1/media/{photo_path}"
            if os.path.exists(full_path):
                size = os.path.getsize(full_path)
                print(f"  ‚úÖ {photo_path} - —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size} –±–∞–π—Ç)")
            else:
                print(f"  ‚ùå {photo_path} - —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω!")
                
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        return False

def test_completion_without_photos(token, order_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)"""
    headers = {
        "Authorization": f"Token {token}"
    }
    
    form_data = {
        "order": str(order_id),
        "work_description": "–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "parts_expenses": "100.00",
        "transport_costs": "50.00",
        "total_received": "2000.00",
        "completion_date": datetime.now().isoformat()
    }
    
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    
    response = requests.post(
        f"{BASE_URL}/api/orders/{order_id}/complete/",
        headers=headers,
        data=form_data
    )
    
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 201:
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {response.text}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = login()
    if not token:
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    order_id_with_photos = create_test_order_with_photos(token)
    if not order_id_with_photos:
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    order_id_without_photos = create_test_order_with_photos(token)
    if not order_id_without_photos:
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    success_with_photos = test_completion_with_photos(token, order_id_with_photos)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    success_without_photos = test_completion_without_photos(token, order_id_without_photos)
    
    print(f"\nüéØ –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_with_photos else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ë–ï–ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_without_photos else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if success_with_photos and success_without_photos:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
