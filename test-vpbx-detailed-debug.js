/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç VPBX –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–≤–æ–Ω–∫–∞–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, —Ç–æ–∫–µ–Ω—ã, API –∑–≤–æ–Ω–∫–æ–≤
 */

const VPBX_BASE_URL = "https://cloudpbx.beeline.kz/VPBX";
const SYSTEM_TOKEN = "8b6728d7-c763-4074-821a-6f2336d93cb8";
const LOGIN = "slavakhan100";
const PASSWORD = "i4yc448p";

// –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
const INTERNAL_NUMBER = "101"; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä VPBX (2-4 —Ü–∏—Ñ—Ä—ã)
const EXTERNAL_NUMBER = "+996555123456"; // –í–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä

console.log("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–î–†–û–ë–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ VPBX");
console.log("=".repeat(50));

async function step1_testDirectAuth() {
    console.log("\nüìç –≠–¢–ê–ü 1: –ü—Ä—è–º–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ VPBX");
    
    try {
        const formData = new URLSearchParams();
        formData.append("login", LOGIN);
        formData.append("password", PASSWORD);

        const response = await fetch(`${VPBX_BASE_URL}/Account/GetToken`, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded",
                "X-VPBX-API-AUTH-TOKEN": SYSTEM_TOKEN,
            },
            body: formData.toString(),
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        console.log(`üìä Content-Type: ${response.headers.get('content-type')}`);

        const responseText = await response.text();
        console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç:");
            console.log({
                hasAccessToken: !!data.AccessToken,
                hasRefreshToken: !!data.RefreshToken,
                expiresIn: data.ExpiresIn,
                tokenPreview: data.AccessToken ? data.AccessToken.substring(0, 20) + '...' : 'N/A'
            });
            return data;
        } else {
            console.log("‚ùå –ü–æ–ª—É—á–µ–Ω HTML –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ JSON:");
            console.log(responseText.substring(0, 200) + '...');
            return null;
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
        return null;
    }
}

async function step2_testLocalAuth() {
    console.log("\nüìç –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
    
    try {
        const response = await fetch("http://localhost:3000/api/vpbx/get-token", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                login: LOGIN,
                password: PASSWORD
            }),
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:");
            console.log({
                hasAccessToken: !!data.accessToken,
                hasRefreshToken: !!data.refreshToken,
                expiresIn: data.expiresIn,
                tokenPreview: data.accessToken ? data.accessToken.substring(0, 20) + '...' : 'N/A'
            });
            return data.accessToken;
        } else {
            const errorData = await response.json();
            console.log("‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", errorData);
            return null;
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º API:", error.message);
        return null;
    }
}

async function step3_testDirectCall(accessToken) {
    console.log("\nüìç –≠–¢–ê–ü 3: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ MakeCall2 –∫ VPBX");
    
    if (!accessToken) {
        console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞");
        return null;
    }

    try {
        const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);
        url.searchParams.set("abonentNumber", INTERNAL_NUMBER);
        url.searchParams.set("number", EXTERNAL_NUMBER);

        console.log(`üìû –í—ã–∑—ã–≤–∞–µ–º: ${INTERNAL_NUMBER} ‚Üí ${EXTERNAL_NUMBER}`);
        console.log(`üîó URL: ${url.toString()}`);

        const response = await fetch(url.toString(), {
            method: "POST",
            headers: {
                "Authorization": accessToken,
                "Content-Type": "application/json",
            },
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        console.log(`üìä Content-Type: ${response.headers.get('content-type')}`);

        const responseText = await response.text();
        console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç:");
            console.log(data);
        } else {
            console.log("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç:");
            if (responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É')) {
                console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: VPBX —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!");
                console.log("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è");
            }
            console.log(responseText.substring(0, 300) + '...');
        }
        
        return responseText;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞:", error.message);
        return null;
    }
}

async function step4_testLocalCall(accessToken) {
    console.log("\nüìç –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –∑–≤–æ–Ω–∫–æ–≤");
    
    if (!accessToken) {
        console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞");
        return null;
    }

    try {
        console.log(`üìû –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API: ${INTERNAL_NUMBER} ‚Üí ${EXTERNAL_NUMBER}`);

        const response = await fetch("http://localhost:3000/api/vpbx/MakeCall2", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`,
            },
            body: JSON.stringify({
                abonentNumber: INTERNAL_NUMBER,
                number: EXTERNAL_NUMBER,
            }),
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        const responseText = await response.text();
        console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç:");
            console.log(data);
        } else {
            console.log("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç:");
            if (responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É')) {
                console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: VPBX —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API!");
            }
            console.log(responseText.substring(0, 300) + '...');
        }
        
        return responseText;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –∑–≤–æ–Ω–∫–æ–≤:", error.message);
        return null;
    }
}

async function step5_testTokenHeaders() {
    console.log("\nüìç –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
    
    const authData = await step1_testDirectAuth();
    if (!authData?.AccessToken) {
        console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞");
        return;
    }

    const token = authData.AccessToken;
    const testCases = [
        { name: "–ë–µ–∑ Bearer", header: token },
        { name: "–° Bearer", header: `Bearer ${token}` },
        { name: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-VPBX-TOKEN", headers: { "X-VPBX-TOKEN": token } },
        { name: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-VPBX-API-AUTH-TOKEN", headers: { "X-VPBX-API-AUTH-TOKEN": token } },
    ];

    for (const testCase of testCases) {
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
        
        try {
            const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);
            url.searchParams.set("abonentNumber", INTERNAL_NUMBER);
            url.searchParams.set("number", EXTERNAL_NUMBER);

            const headers = { "Content-Type": "application/json" };
            
            if (testCase.header) {
                headers["Authorization"] = testCase.header;
            }
            
            if (testCase.headers) {
                Object.assign(headers, testCase.headers);
            }

            const response = await fetch(url.toString(), {
                method: "POST",
                headers,
            });

            const responseText = await response.text();
            const isAuth = responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
            
            console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
            console.log(`   üìä –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isAuth ? '–î–ê' : '–ù–ï–¢'}`);
            
            if (!isAuth && responseText.startsWith('{')) {
                console.log("   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç!");
                console.log("   üìû –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
}

async function step6_testAccountInfo(accessToken) {
    console.log("\nüìç –≠–¢–ê–ü 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ");
    
    if (!accessToken) {
        console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞");
        return;
    }

    try {
        const response = await fetch(`${VPBX_BASE_URL}/Api/Account`, {
            method: "GET",
            headers: {
                "Authorization": accessToken,
                "Accept": "application/json",
            },
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        const responseText = await response.text();
        
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:");
            console.log(data);
        } else {
            console.log("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç");
            console.log(responseText.substring(0, 200) + '...');
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:", error.message);
    }
}

async function runFullDiagnostic() {
    console.log("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò VPBX");
    
    // –≠—Ç–∞–ø 1: –ü—Ä—è–º–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const authData = await step1_testDirectAuth();
    
    // –≠—Ç–∞–ø 2: –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const localToken = await step2_testLocalAuth();
    
    // –≠—Ç–∞–ø 3: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    const directToken = authData?.AccessToken;
    await step3_testDirectCall(directToken);
    
    // –≠—Ç–∞–ø 4: –õ–æ–∫–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    await step4_testLocalCall(localToken || directToken);
    
    // –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    await step5_testTokenHeaders();
    
    // –≠—Ç–∞–ø 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    await step6_testAccountInfo(directToken);
    
    console.log("\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê");
    console.log("=".repeat(50));
    console.log("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã");
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
runFullDiagnostic().catch(console.error);
