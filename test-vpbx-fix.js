/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–≤–æ–Ω–∫–∞–º–∏ VPBX
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã
 */

const VPBX_BASE_URL = "https://cloudpbx.beeline.kz/VPBX";
const SYSTEM_TOKEN = "8b6728d7-c763-4074-821a-6f2336d93cb8";
const LOGIN = "slavakhan100";
const PASSWORD = "i4yc448p";

// –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
const INTERNAL_NUMBER = "101";
const EXTERNAL_NUMBER = "+996555123456";

console.log("üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú VPBX –ó–í–û–ù–ö–ò");
console.log("=".repeat(50));

async function getToken() {
    console.log("üìç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞...");
    
    const formData = new URLSearchParams();
    formData.append("login", LOGIN);
    formData.append("password", PASSWORD);

    const response = await fetch(`${VPBX_BASE_URL}/Account/GetToken`, {
        method: "POST",
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-VPBX-API-AUTH-TOKEN": SYSTEM_TOKEN,
        },
        body: formData.toString(),
    });

    const data = await response.json();
    console.log("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", data.AccessToken.substring(0, 20) + '...');
    return data.AccessToken;
}

async function testGetMethod(token) {
    console.log("\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –º–µ—Ç–æ–¥...");
    
    const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);
    url.searchParams.set("abonentNumber", INTERNAL_NUMBER);
    url.searchParams.set("number", EXTERNAL_NUMBER);
    url.searchParams.set("token", token); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä

    console.log(`üîó URL: ${url.toString().replace(token, 'TOKEN_HIDDEN')}`);

    const response = await fetch(url.toString(), {
        method: "GET",
        headers: {
            "Accept": "application/json",
        },
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    const isAuth = responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    
    console.log(`üìä –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isAuth ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (!isAuth) {
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:", data);
            return data;
        } else {
            console.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", responseText.substring(0, 200));
        }
    }
    
    return null;
}

async function testPostWithTokenParam(token) {
    console.log("\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...");
    
    const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);
    url.searchParams.set("token", token);

    const response = await fetch(url.toString(), {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
        },
        body: new URLSearchParams({
            abonentNumber: INTERNAL_NUMBER,
            number: EXTERNAL_NUMBER,
        }).toString(),
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    const isAuth = responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    
    console.log(`üìä –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isAuth ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (!isAuth) {
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:", data);
            return data;
        } else {
            console.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", responseText.substring(0, 200));
        }
    }
    
    return null;
}

async function testPostWithJsonAndTokenParam(token) {
    console.log("\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST JSON —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...");
    
    const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);
    url.searchParams.set("token", token);

    const response = await fetch(url.toString(), {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
        },
        body: JSON.stringify({
            abonentNumber: INTERNAL_NUMBER,
            number: EXTERNAL_NUMBER,
        }),
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    const isAuth = responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    
    console.log(`üìä –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isAuth ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (!isAuth) {
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:", data);
            return data;
        } else {
            console.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", responseText.substring(0, 200));
        }
    }
    
    return null;
}

async function testPostWithCustomHeaders(token) {
    console.log("\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...");
    
    const url = new URL(`${VPBX_BASE_URL}/Api/MakeCall2`);

    const response = await fetch(url.toString(), {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "X-VPBX-TOKEN": token,
            "X-API-TOKEN": token,
            "Authorization": `Token ${token}`,
        },
        body: JSON.stringify({
            abonentNumber: INTERNAL_NUMBER,
            number: EXTERNAL_NUMBER,
        }),
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    const isAuth = responseText.includes('VPBX –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    
    console.log(`üìä –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isAuth ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (!isAuth) {
        if (responseText.startsWith('{')) {
            const data = JSON.parse(responseText);
            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:", data);
            return data;
        } else {
            console.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", responseText.substring(0, 200));
        }
    }
    
    return null;
}

async function runFix() {
    try {
        const token = await getToken();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        let result = null;
        
        result = await testGetMethod(token);
        if (result) {
            console.log("\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: GET –º–µ—Ç–æ–¥ —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö!");
            return;
        }
        
        result = await testPostWithTokenParam(token);
        if (result) {
            console.log("\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: POST —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö!");
            return;
        }
        
        result = await testPostWithJsonAndTokenParam(token);
        if (result) {
            console.log("\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: POST JSON —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö!");
            return;
        }
        
        result = await testPostWithCustomHeaders(token);
        if (result) {
            console.log("\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: POST —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏!");
            return;
        }
        
        console.log("\n‚ùå –ù–ò –û–î–ò–ù –ú–ï–¢–û–î –ù–ï –°–†–ê–ë–û–¢–ê–õ");
        console.log("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é VPBX –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ");
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    }
}

runFix().catch(console.error);
