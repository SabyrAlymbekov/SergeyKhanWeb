#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É capacity analysis API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
"""

import requests
import json
import time
from datetime import datetime

def test_capacity_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç capacity analysis API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Capacity Analysis API...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä–∞
    curator_token = "8b709c0c68b90ff206c2e4ce2321a9d7f4749df8"
    
    headers = {
        'Authorization': f'Token {curator_token}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –¢–µ—Å—Ç capacity analysis
        print("\nüìä –¢–µ—Å—Ç Capacity Analysis:")
        response = requests.get('http://127.0.0.1:8000/api/capacity/analysis/', headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Capacity Analysis API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            required_keys = ['today', 'tomorrow', 'pending_orders', 'recommendations']
            for key in required_keys:
                if key in data:
                    print(f"  ‚úÖ {key}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"  ‚ùå {key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            today = data.get('today', {})
            tomorrow = data.get('tomorrow', {})
            pending = data.get('pending_orders', {})
            recommendations = data.get('recommendations', [])
            
            print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
            print(f"  üî¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {today.get('capacity', {}).get('available_slots', 0)}")
            print(f"  üë®‚Äçüîß –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {today.get('masters_stats', {}).get('masters_with_availability', 0)}")
            print(f"  üìä –ó–∞–≥—Ä—É–∑–∫–∞: {today.get('capacity', {}).get('capacity_utilization_percent', 0)}%")
            
            print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
            print(f"  üî¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {tomorrow.get('capacity', {}).get('available_slots', 0)}")
            print(f"  üë®‚Äçüîß –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {tomorrow.get('masters_stats', {}).get('masters_with_availability', 0)}")
            print(f"  üìä –ó–∞–≥—Ä—É–∑–∫–∞: {tomorrow.get('capacity', {}).get('capacity_utilization_percent', 0)}%")
            
            print(f"\nüìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã:")
            print(f"  üÜï –ù–æ–≤—ã—Ö: {pending.get('new_orders', 0)}")
            print(f"  ‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pending.get('processing_orders', 0)}")
            print(f"  üìä –í—Å–µ–≥–æ: {pending.get('total_pending', 0)}")
            
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}):")
            for i, rec in enumerate(recommendations, 1):
                type_emoji = {
                    'success': '‚úÖ',
                    'warning': '‚ö†Ô∏è',
                    'error': '‚ùå',
                    'info': '‚ÑπÔ∏è'
                }.get(rec.get('type', 'info'), '‚ÑπÔ∏è')
                
                print(f"  {type_emoji} {i}. {rec.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"      {rec.get('message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                print(f"      üéØ {rec.get('action', '–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è')}")
            
        else:
            print(f"‚ùå Capacity Analysis API –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
        # –¢–µ—Å—Ç weekly forecast
        print(f"\nüìÖ –¢–µ—Å—Ç Weekly Forecast:")
        response = requests.get('http://127.0.0.1:8000/api/capacity/weekly-forecast/', headers=headers)
        
        if response.status_code == 200:
            weekly_data = response.json()
            print("‚úÖ Weekly Forecast API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            forecast = weekly_data.get('week_forecast', [])
            total_capacity = weekly_data.get('total_week_capacity', 0)
            avg_capacity = weekly_data.get('avg_daily_capacity', 0)
            
            print(f"  üìä –û–±—â–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {total_capacity}")
            print(f"  üìä –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {avg_capacity}")
            
            print(f"\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º:")
            for day in forecast:
                print(f"  {day.get('date')} ({day.get('day_name')}): {day.get('available_capacity')} —Å–ª–æ—Ç–æ–≤")
                
        else:
            print(f"‚ùå Weekly Forecast API –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def test_frontend_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        response = requests.get('http://localhost:3000/orders/create', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:3000")
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            return True
        else:
            print(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    print("=" * 70)
    
    # –¢–µ—Å—Ç—ã
    tests_passed = 0
    total_tests = 2
    
    # –¢–µ—Å—Ç 1: Capacity Analysis API
    if test_capacity_api():
        tests_passed += 1
        
    # –¢–µ—Å—Ç 2: Frontend Integration
    if test_frontend_integration():
        tests_passed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Backend capacity analysis API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Frontend –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    else:
        print(f"‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if tests_passed == 0:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
        else:
            print("‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
    
    print("\nüí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ:")
    print("   üåê Frontend: http://localhost:3000/orders/create")
    print("   üîß Backend API: http://127.0.0.1:8000/api/capacity/analysis/")
    print("   üìÖ Weekly Forecast: http://127.0.0.1:8000/api/capacity/weekly-forecast/")

if __name__ == "__main__":
    main()
